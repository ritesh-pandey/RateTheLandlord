name: Merge Actions

on:
  pull_request:
    branches: ["develop", "main"]

jobs:
  lint-be:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Lint backend
        run: |
          cd backend
          npm install
          npm run lint

  lint-fe:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Lint frontend
        run: |
          cd frontend
          npm install
          npm run lint

  test-fe:
    runs-on: ubuntu-latest
    needs: [lint-fe]

    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Test frontend
        run: |
          cd frontend
          npm install
          npm run test

  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-be, test-fe]

    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Create env file
        run: |
          touch .env
          echo BEPORT=${{secrets.BEPORT}} >> .env
          echo ENVIRONMENT=${{secrets.ENVIRONMENT}} >> .env
          echo FEPORT=${{secrets.FEPORT}} >> .env
          echo HCPATCHA_SECRET_KEY=${{secrets.HCPATCHA_SECRET_KEY}} >> .env
          echo HCPATCHA_SITE_KEY=${{secrets.API_TOKEN_SALT}} >> .env
          echo JWT_KEY="${{secrets.JWT_KEY}}" >> .env
          echo API_URL=${{secrets.API_URL}} >> .env
          echo NEXT_PUBLIC_HCPATCHA_SITE_KEY=${{secrets.NEXT_PUBLIC_HCPATCHA_SITE_KEY}} >> .env
          echo OPENAI_API_KEY=${{secrets.OPENAI_API_KEY}} >> .env
          echo PGDATABASE=${{secrets.PGDATABASE}} >> .env
          echo PGHOST=${{secrets.PGHOST}} >> .env
          echo PGPASSWORD="${{secrets.PGPASSWORD}}" >> .env
          echo PGPORT=${{secrets.PGPORT}} >> .env
          echo PGUSERNAME=${{secrets.PGUSERNAME}} >> .env
          cat .env
      - name: Pull Docker
        run: docker-compose pull
      - name: Build Docker
        env:
          BEPORT: ${{secrets.BEPORT}}
          ENVIRONMENT: ${{secrets.ENVIRONMENT}}
          FEPORT: ${{secrets.FEPORT}}
          HCPATCHA_SECRET_KEY: ${{secrets.HCPATCHA_SECRET_KEY}}
          HCPATCHA_SITE_KEY: ${{secrets.API_TOKEN_SALT}}
          JWT_KEY: ${{secrets.JWT_KEY}}
          API_URL: ${{secrets.API_URL}}
          NEXT_PUBLIC_HCPATCHA_SITE_KEY: ${{secrets.NEXT_PUBLIC_HCPATCHA_SITE_KEY}}
          OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
          PGDATABASE: ${{secrets.PGDATABASE}}
          PGHOST: ${{secrets.PGHOST}}
          PGPASSWORD: ${{secrets.PGPASSWORD}}
          PGPORT: ${{secrets.PGPORT}}
          PGUSERNAME: ${{secrets.PGUSERNAME}}
        run: docker-compose build
